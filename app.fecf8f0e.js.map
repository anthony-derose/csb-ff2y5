{"version":3,"sources":["src/timer.js","src/app.js"],"names":["Timer","callback","timeInterval","options","start","expected","Date","now","theTimeout","immediate","timeout","setTimeout","round","console","log","stop","clearTimeout","drift","errorCallback","document","getElementById","innerHTML","tempoDisplay","querySelector","decreaseTempoBtn","increaseTempoBtn","tempoSlider","startStopBtn","subtractBeats","addBeats","measureCount","klack","Audio","click","bpm","beatspermeasure","count","run","updateMetronome","textContent","vaue","metronome","tempoMinMax","playClick","play","currentTime","addEventListener","value"],"mappings":";AA8CeA,aA5Cf,SAASA,EAAMC,EAAUC,EAAcC,GAAS,IAAA,EAAA,KACzCD,KAAAA,aAAeA,EAGfE,KAAAA,MAAQ,WAEX,EAAKC,SAAWC,KAAKC,MAAQ,EAAKL,aAElC,EAAKM,WAAa,KAEdL,EAAQM,WACVR,IAGF,EAAKS,QAAUC,WAAW,EAAKC,MAAO,EAAKV,cAC3CW,QAAQC,IAAI,kBAGTC,KAAAA,KAAO,WACVC,aAAa,EAAKN,SAClBG,QAAQC,IAAI,kBAGTF,KAAAA,MAAQ,WACXC,QAAQC,IAAI,UAAW,EAAKJ,SAExBO,IAAAA,EAAQX,KAAKC,MAAQ,EAAKF,SAE1BY,EAAQ,EAAKf,cAEXC,EAAQe,eACVf,EAAQe,gBAGZjB,IAEA,EAAKI,UAAY,EAAKH,aACtBW,QAAQC,IAAI,SAAUG,GACtBJ,QAAQC,IAAI,4BAA6B,EAAKZ,aAAee,GAE7D,EAAKP,QAAUC,WAAW,EAAKC,MAAO,EAAKV,aAAee,IAI/CjB,OAAAA,eAAAA,QAAAA,aAAAA,CAAAA,OAAAA,IAAAA,QAAAA,aAAAA,EAAAA,IAAAA,EAAAA,EAAAA,QAAAA,QAAAA;;;;AC+Df,aA7GA,IAAA,EAAA,EAAA,QAAA,eA6GA,SAAA,EAAA,GAAA,OAAA,GAAA,EAAA,WAAA,EAAA,CAAA,QAAA,GA5GA,QAAA,gBAEAmB,SAASC,eAAe,OAAOC,UAA/B,OAIA,IAAMC,EAAeH,SAASI,cAAc,UACtCC,EAAmBL,SAASI,cAAc,mBAC1CE,EAAmBN,SAASI,cAAc,mBAC1CG,EAAcP,SAASI,cAAc,WACrCI,EAAeR,SAASI,cAAc,eACtCK,EAAgBT,SAASI,cAAc,mBACvCM,EAAWV,SAASI,cAAc,cAClCO,EAAeX,SAASI,cAAc,kBAEtCQ,EAAQ,IAAIC,MAAM,aAClBC,EAAQ,IAAID,MAAM,aAEpBE,EAAM,IACNC,EAAkB,EAClBC,EAAQ,EACRC,GAAM,EAyDV,SAASC,IACPhB,EAAaiB,YAAcL,EAC3BR,EAAYc,KAAON,EACnBO,EAAUvC,aAAe,IAAQgC,EAGnC,SAASQ,KAST,SAASC,IACHP,IAAUD,IACZC,EAAQ,GAEI,IAAVA,GACFL,EAAMa,OACNb,EAAMc,YAAc,IAEpBZ,EAAMW,OACNX,EAAMY,YAAc,GAEtBT,IAjFFZ,EAAiBsB,iBAAiB,QAAS,WACrCZ,GAAO,KAGXA,IACAQ,IACAJ,OAGFb,EAAiBqB,iBAAiB,QAAS,WACrCZ,GAAO,MAGXA,IACAQ,IACAJ,OAGFZ,EAAYoB,iBAAiB,QAAS,WACpCZ,EAAMR,EAAYqB,MAClBL,IACAJ,MAGFX,EAAamB,iBAAiB,QAAS,WACrCV,EAAQ,EACHC,GAKHI,EAAU1B,OACVsB,GAAM,EACNV,EAAaY,YAAc,UAN3BE,EAAUrC,QACViC,GAAM,EACNV,EAAaY,YAAc,UAQ/BX,EAAckB,iBAAiB,QAAS,WAClCX,GAAmB,IAGvBA,IACAL,EAAaS,YAAcJ,EAC3BC,EAAQ,KAGVP,EAASiB,iBAAiB,QAAS,WAC7BX,GAAmB,KAGvBA,IACAL,EAAaS,YAAcJ,EAC3BC,EAAQ,KAgCV,IAAMK,EAAY,IAAIzC,EAAJ,QAAU2C,EAAW,IAAQT,EAAK,CAAEzB,WAAW","file":"app.fecf8f0e.js","sourceRoot":"..","sourcesContent":["// Add accurate timer constructor function\n\nfunction Timer(callback, timeInterval, options) {\n  this.timeInterval = timeInterval;\n\n  // Add method to start timer\n  this.start = () => {\n    // Set the expected time. The moment in time we start the timer plus whatever the time interval is.\n    this.expected = Date.now() + this.timeInterval;\n    // Start the timeout and save the id in a property, so we can cancel it later\n    this.theTimeout = null;\n\n    if (options.immediate) {\n      callback();\n    }\n\n    this.timeout = setTimeout(this.round, this.timeInterval);\n    console.log(\"Timer Started\");\n  };\n  // Add method to stop timer\n  this.stop = () => {\n    clearTimeout(this.timeout);\n    console.log(\"Timer Stopped\");\n  };\n  // Round method that takes care of running the callback and adjusting the time\n  this.round = () => {\n    console.log(\"timeout\", this.timeout);\n    // The drift will be the current moment in time for this round minus the expected time..\n    let drift = Date.now() - this.expected;\n    // Run error callback if drift is greater than time interval, and if the callback is provided\n    if (drift > this.timeInterval) {\n      // If error callback is provided\n      if (options.errorCallback) {\n        options.errorCallback();\n      }\n    }\n    callback();\n    // Increment expected time by time interval for every round after running the callback function.\n    this.expected += this.timeInterval;\n    console.log(\"Drift:\", drift);\n    console.log(\"Next round time interval:\", this.timeInterval - drift);\n    // Run timeout again and set the timeInterval of the next iteration to the original time interval minus the drift.\n    this.timeout = setTimeout(this.round, this.timeInterval - drift);\n  };\n}\n\nexport default Timer;\n","import Timer from \"./timer.js\";\nimport \"./styles.css\";\n\ndocument.getElementById(\"app\").innerHTML = `\n\n`;\n\nconst tempoDisplay = document.querySelector(\".tempo\");\nconst decreaseTempoBtn = document.querySelector(\".decrease-tempo\");\nconst increaseTempoBtn = document.querySelector(\".increase-tempo\");\nconst tempoSlider = document.querySelector(\".slider\");\nconst startStopBtn = document.querySelector(\".start-stop\");\nconst subtractBeats = document.querySelector(\".subtract-beats\");\nconst addBeats = document.querySelector(\".add-beats\");\nconst measureCount = document.querySelector(\".measure-count\");\n\nconst klack = new Audio(\"klack.mp3\");\nconst click = new Audio(\"click.mp3\");\n\nlet bpm = 150;\nlet beatspermeasure = 4;\nlet count = 0;\nlet run = false;\n\ndecreaseTempoBtn.addEventListener(\"click\", () => {\n  if (bpm <= 50) {\n    return;\n  }\n  bpm--;\n  tempoMinMax();\n  updateMetronome();\n});\n\nincreaseTempoBtn.addEventListener(\"click\", () => {\n  if (bpm >= 250) {\n    return;\n  }\n  bpm++;\n  tempoMinMax();\n  updateMetronome();\n});\n\ntempoSlider.addEventListener(\"input\", () => {\n  bpm = tempoSlider.value;\n  tempoMinMax();\n  updateMetronome();\n});\n\nstartStopBtn.addEventListener(\"click\", () => {\n  count = 0;\n  if (!run) {\n    metronome.start();\n    run = true;\n    startStopBtn.textContent = \"STOP\";\n  } else {\n    metronome.stop();\n    run = false;\n    startStopBtn.textContent = \"START\";\n  }\n});\n\nsubtractBeats.addEventListener(\"click\", () => {\n  if (beatspermeasure <= 2) {\n    return;\n  }\n  beatspermeasure--;\n  measureCount.textContent = beatspermeasure;\n  count = 0;\n});\n\naddBeats.addEventListener(\"click\", () => {\n  if (beatspermeasure >= 12) {\n    return;\n  }\n  beatspermeasure++;\n  measureCount.textContent = beatspermeasure;\n  count = 0;\n});\n\nfunction updateMetronome() {\n  tempoDisplay.textContent = bpm;\n  tempoSlider.vaue = bpm;\n  metronome.timeInterval = 60000 / bpm;\n}\n\nfunction tempoMinMax() {\n  if (bpm <= 50) {\n    return;\n  }\n  if ((bpm) => 250) {\n    return;\n  }\n}\n\nfunction playClick() {\n  if (count === beatspermeasure) {\n    count = 0;\n  }\n  if (count === 0) {\n    klack.play();\n    klack.currentTime = 0;\n  } else {\n    click.play();\n    click.currentTime = 0;\n  }\n  count++;\n}\n\nconst metronome = new Timer(playClick, 60000 / bpm, { immediate: true });\n//metronome.start();\n"]}